name: Windows CI

on:
  push:
    branches: [ master ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

jobs:

  # see: https://github.community/t/upload-multi-assets-from-different-os-to-a-release/17031
  # see: https://github.com/actions/create-release/issues/14#issuecomment-555379810
  # see: https://dev.to/eugenebabichenko/automated-multi-platform-releases-with-github-actions-1abg
  create_release:

    name: Prepare release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      if: contains(github.ref, 'release')
      uses: actions/checkout@v2
    - name: Create Release
      if: contains(github.ref, 'release')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      if: contains(github.ref, 'release')
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      if: contains(github.ref, 'release')
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt        

  windows_5_14_2_gcc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v1
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.14.2'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_mingw73'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      run: |
        d:
        dir
        python -m aqt --help       
        #python -m aqt tool -O d:\a\SciTEQt/Qt windows tools_ifw qt.tools.ifw.32 win-x86
        #python -m aqt tool -O d:\a\SciTEQt/Qt windows tools_ifw qt.tools.ifw.40 win-x86
        python -m aqt tool windows tools_ifw 4.0 win-x86 --outputdir d:\a\SciTEQt\Qt 
        #python -m aqt tool windows tools_ifw 3.2.2 win-x86 --outputdir d:\a\SciTEQt\Qt 
        dir d:\a\SciteQt\Qt\Tools
        gcc -v
        qmake -r sciteqt.pro
        dir
        mingw32-make
        dir
        dir scite\bin
        dir scite\qt
        dir scite\qt\release
        dir scintilla\bin
        cd scite\qt\dist\packages\org.scintilla.sciteqt\data
        windeployqt --release --qmldir ..\..\..\..\qml sciteqt.exe
        dir
        cd ..\..\..
        dir
        d:\a\SciTEQt\Qt\Tools\QtInstallerFramework\4.0\bin\binarycreator --offline-only -c config\config.xml -p packages SciTEQtInstallerMingw_5_14_2_broken.exe
        dir 
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/dist/SciTEQtInstallerMingw_5_14_2_broken.exe
        asset_name: SciTEQtInstallerMingw_5_14_2_broken.exe
        asset_content_type: application/exe

  #~ windows_gcc_5_14_2_32bit_build:

    #~ runs-on: windows-latest
    #~ needs: create_release

    #~ steps:
    #~ - uses: actions/checkout@v1
    #~ - uses: jurplel/install-qt-action@v2
      #~ with:
        #~ # Directory to install Qt
        #~ dir: # optional
        #~ # Version of Qt to install
        #~ version: '5.14.2'
        #~ # Host platform
        #~ host: # optional
        #~ # Target platform for build
        #~ target: 'desktop'
        #~ # Architecture for Windows/Android
        #~ arch: 'win32_mingw73'
        #~ # Whether or not to install Qt dependencies on Linux
        #~ install-deps: 'true'
        #~ # Additional Qt modules to install
        #~ modules: 'qtscript qtscripttools'
        #~ # Force a Qt mirror in case the default is not working
        #~ mirror: # optional
        #~ # Whether or not to actually download Qt
        #~ cached: # optional, default is false
        #~ # Version of aqtinstall to use in case of issues
        #~ aqtversion: # optional, default is ==0.8
        #~ # Version of py7zr to use in case of issues
        #~ py7zrversion: # optional, default is ==0.6
        #~ # Any extra arguments to append to the back
        #~ extra: # optional
    #~ - name: Install Qt and compile
      #~ run: |
        #~ d:
        #~ dir 
        #~ python -m aqt tool -O d:\a\SciTEQt/Qt windows tools_ifw 3.2.2 win-x86
        #~ gcc -v
        #~ qmake -r sciteqt.pro
        #~ dir
        #~ mingw32-make
        #~ dir
        #~ dir scite\bin
        #~ dir scite\qt
        #~ dir scite\qt\release
        #~ dir scintilla\bin
        #~ cd scite\qt\dist\packages\org.scintilla.sciteqt\data
        #~ windeployqt --release --qmldir ..\..\..\..\qml sciteqt.exe
        #~ dir
        #~ cd ..\..\..
        #~ dir
        #~ d:\a\SciTEQt\Qt\Tools\QtInstallerFramework\3.2\bin\binarycreator --offline-only -c config\config.xml -p packages SciTEQtInstaller32bitMingw.exe
        #~ dir
    #~ - name: Upload Release Asset
      #~ if: contains(github.ref, 'release')
      #~ id: upload-release-asset
      #~ uses: actions/upload-release-asset@v1
      #~ env:
        #~ GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #~ with:
        #~ upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        #~ asset_path: scite/qt/dist/SciTEQtInstaller32bitMingw.exe
        #~ asset_name: SciTEQtInstaller32bitMingw.exe
        #~ asset_content_type: application/exe

  windows_5_14_2_msc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v1
    - uses: ilammy/msvc-dev-cmd@v1.0.0
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.14.2'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_msvc2017_64'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      run: |
        cd 
        dir
        d:
        dir 
        python -m aqt tool windows tools_ifw 4.0 win-x86 --outputdir d:\a\SciTEQt\Qt 
        dir d:\a\SciteQt\Qt\Tools
        cl
        where qmake
        qmake -r sciteqt.pro
        dir
        nmake
        dir
        dir scite
        dir scite\qt
        dir scite\qt\release
        dir scite\bin
        dir scintilla\bin
        cd scite\qt\dist\packages\org.scintilla.sciteqt\data
        windeployqt --release --qmldir ..\..\..\..\qml sciteqt.exe
        dir
        cd ..\..\..
        dir
        d:\a\SciTEQt\Qt\Tools\QtInstallerFramework\4.0\bin\binarycreator --offline-only -c config\config.xml -p packages SciTEQtInstallerMsc_5_14_2.exe
        dir 
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/dist/SciTEQtInstallerMsc_5_14_2.exe
        asset_name: SciTEQtInstallerMsc_5_14_2.exe
        asset_content_type: application/exe

  windows_5_15_1_msc_build:

    runs-on: windows-latest
    needs: create_release

    steps:
    - uses: actions/checkout@v1
    - uses: ilammy/msvc-dev-cmd@v1.0.0
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.15.1'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'win64_msvc2019_64'
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      run: |
        cd 
        dir
        d:
        dir 
        python -m aqt tool windows tools_ifw 4.0 win-x86 --outputdir d:\a\SciTEQt\Qt 
        dir d:\a\SciteQt\Qt\Tools
        cl
        where qmake
        qmake -r sciteqt.pro
        dir
        nmake
        dir
        dir scite
        dir scite\qt
        dir scite\qt\release
        dir scite\bin
        dir scintilla\bin
        cd scite\qt\dist\packages\org.scintilla.sciteqt\data
        windeployqt --release --qmldir ..\..\..\..\qml sciteqt.exe
        dir
        cd ..\..\..
        dir
        d:\a\SciTEQt\Qt\Tools\QtInstallerFramework\4.0\bin\binarycreator --offline-only -c config\config.xml -p packages SciTEQtInstallerMsc_5_15_1.exe
        dir 
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/dist/SciTEQtInstallerMsc_5_15_1.exe
        asset_name: SciTEQtInstallerMsc_5_15_1.exe
        asset_content_type: application/exe

  # this is a copy of the content MacOS.yml used only to upload binary for release
  macos_5_14_2_build:

    runs-on: macos-11.0
    needs: create_release

    steps:
    - uses: actions/checkout@v2
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.14.2'
        # Host platform
        host: 'mac'
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      if: contains(github.ref, 'release')
      run: |
        pwd 
        ls -lrt
        ls -lrt ..
        ls -lrt ../Qt
        ls -lrt ../Qt/Tools
        python3 -m aqt tool -O ../Qt mac tools_ifw 3.2.2 mac-x64
        ls -lrt ../Qt/Tools
        which qmake
        qmake -r sciteqt.pro
        clang++ --version
        sw_vers
        ls -lrt
        make
        ls -lrt
        ls -lrt scite/qt

        #make -j 4
        ls -lrt
        ls -lrt scite
        ls -lrt scite/qt
        cd scite/qt
        which macdeployqt
        macdeployqt sciteqt.app -dmg -verbose=2 -qmldir=qml
        ls -lrt
        cp sciteqt.dmg sciteqt_5_14_2.dmg
        ls -lrt        
    # this step is added for the release    
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/sciteqt_5_14_2.dmg
        asset_name: sciteqt_5_14_2.dmg
        asset_content_type: application/exe
        
  # this is a copy of the content MacOS.yml used only to upload binary for release
  macos_5_11_3_build:

    runs-on: macos-11.0
    needs: create_release

    steps:
    - uses: actions/checkout@v2
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.11.3'
        # Host platform
        host: 'mac'
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      if: contains(github.ref, 'release')
      run: |
        pwd 
        ls -lrt
        ls -lrt ..
        ls -lrt ../Qt
        #ls -lrt ../Qt/Tools
        #python3 -m aqt tool -O ../Qt mac tools_ifw 3.2.2 mac-x64
        #ls -lrt ../Qt/Tools
        clang++ --version
        sw_vers
        which qmake
        qmake -r sciteqt.pro
        ls -lrt
        make
        ls -lrt
        ls -lrt scite/qt

        #make -j 4
        ls -lrt
        ls -lrt scite
        ls -lrt scite/qt
        cd scite/qt
        which macdeployqt
        macdeployqt sciteqt.app -dmg -verbose=2 -qmldir=qml
        ls -lrt        
        cp sciteqt.dmg sciteqt_5_11_3.dmg
        ls -lrt        
    # this step is added for the release    
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/sciteqt_5_11_3.dmg
        asset_name: sciteqt_5_11_3.dmg
        asset_content_type: application/exe

  # this is a copy of the content MacOS.yml used only to upload binary for release
  linux_wasm_5_14_2:
  
    runs-on: ubuntu-latest
    needs: create_release
      
    steps:
    - uses: actions/checkout@v2
    - uses: mymindstorm/setup-emsdk@v6
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.14.2'
        # Host platform
        host: # optional
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: 'wasm_32' # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools' # qtcharts, qtdatavis3d, qtpurchasing, qtvirtualkeyboard, qtwebengine, qtnetworkauth, qtwebglplugin, qtscript, debug_info
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      if: contains(github.ref, 'release')
      run: |
        em++ --version
        which em++
        echo $PATH
        #python3 -m aqt install -O /home/runner/work/SciTEQt/Qt 5.14.2 linux desktop wasm_32 -m qtscript qtscripttools
        emsdk install sdk-fastcomp-1.38.27-64bit
        emsdk activate sdk-fastcomp-1.38.27-64bit
        echo $PATH
        echo $EMSDK
        . $EMSDK/emsdk_env.sh
        em++ --version
        which em++
        ls -lrt
        ls -lrt ..
        ls -lrt ../Qt
        which qmake
        qmake -v
        ../Qt/5.14.2/wasm_32/bin/qmake -v
        ../Qt/5.14.2/wasm_32/bin/qmake -r sciteqt.pro
        ls -lrt
        make
        ls -lrt
        ls -lrt scintilla/bin
        ls -lrt scite/qt
        ls -lrt scite/bin
        cd scite/qt
        zip sciteqt_wasm_5_14_2.zip sciteqt.js sciteqt.wasm sciteqt.html qtlogo.svg qtloader.js
        ls -lrt
        unzip -v sciteqt_wasm_5_14_2.zip
        pwd
    # this step is added for the release    
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: scite/qt/sciteqt_wasm_5_14_2.zip
        asset_name: sciteqt_wasm_5_14_2.zip
        asset_content_type: application/zip

#  Disabled, because there are some link problems with Qt 5.15.1 and WASM...
#  linux_wasm_5_15_1:
#  
#    runs-on: ubuntu-latest
#    needs: create_release
#      
#    steps:
#    - uses: actions/checkout@v2
#    - uses: mymindstorm/setup-emsdk@v6
#    - uses: jurplel/install-qt-action@v2
#      with:
#        # Directory to install Qt
#        dir: # optional
#        # Version of Qt to install
#        version: '5.15.1'
#        # Host platform
#        host: # optional
#        # Target platform for build
#        target: 'desktop'
#        # Architecture for Windows/Android
#        arch: 'wasm_32' # optional
#        # Whether or not to install Qt dependencies on Linux
#        install-deps: 'true'
#        # Additional Qt modules to install
#        modules: 'qtscript qtscripttools' # qtcharts, qtdatavis3d, qtpurchasing, qtvirtualkeyboard, qtwebengine, qtnetworkauth, qtwebglplugin, qtscript, debug_info
#        # Force a Qt mirror in case the default is not working
#        mirror: # optional
#        # Whether or not to actually download Qt
#        cached: # optional, default is false
#        # Version of aqtinstall to use in case of issues
#        aqtversion: # optional, default is ==0.8
#        # Version of py7zr to use in case of issues
#        py7zrversion: # optional, default is ==0.6
#        # Any extra arguments to append to the back
#        extra: # optional
#    - name: Install Qt and compile
#      if: contains(github.ref, 'release')
#      run: |
#        em++ --version
#        which em++
#        echo $PATH
#        #python3 -m aqt install -O /home/runner/work/SciTEQt/Qt 5.15.1 linux desktop wasm_32 -m qtscript qtscripttools
#        emsdk install sdk-fastcomp-1.39.8-64bit
#        emsdk activate sdk-fastcomp-1.39.8-64bit
#        echo $PATH
#        echo $EMSDK
#        . $EMSDK/emsdk_env.sh
#        em++ --version
#        which em++
#        ls -lrt
#        ls -lrt ..
#        ls -lrt ../Qt
#        which qmake
#        qmake -v
#        ../Qt/5.15.1/wasm_32/bin/qmake -v
#        ../Qt/5.15.1/wasm_32/bin/qmake -r sciteqt.pro
#        ls -lrt
#        make
#        ls -lrt
#        ls -lrt scintilla/bin
#        ls -lrt scite/qt
#        ls -lrt scite/bin
#        cd scite/qt
#        zip sciteqt_wasm_5_15_1.zip sciteqt.js sciteqt.wasm sciteqt.html qtlogo.svg qtloader.js
#        ls -lrt
#        unzip -v sciteqt_wasm_5_15_1.zip
#        pwd
#    # this step is added for the release    
#    - name: Upload Release Asset
#      if: contains(github.ref, 'release')
#      id: upload-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: scite/qt/sciteqt_wasm_5_15_1.zip
#        asset_name: sciteqt_wasm_5_15_1.zip
#        asset_content_type: application/zip
        