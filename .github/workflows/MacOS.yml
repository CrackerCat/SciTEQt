name: MacOS CI

on:
  push:
    branches: [ master ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

jobs:
            
  macos_build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - uses: jurplel/install-qt-action@v2
      with:
        # Directory to install Qt
        dir: # optional
        # Version of Qt to install
        version: '5.14.2'
        # Host platform
        host: 'mac'
        # Target platform for build
        target: 'desktop'
        # Architecture for Windows/Android
        arch: # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: 'true'
        # Additional Qt modules to install
        modules: 'qtscript qtscripttools'
        # Force a Qt mirror in case the default is not working
        mirror: # optional
        # Whether or not to actually download Qt
        cached: # optional, default is false
        # Version of aqtinstall to use in case of issues
        aqtversion: # optional, default is ==0.8
        # Version of py7zr to use in case of issues
        py7zrversion: # optional, default is ==0.6
        # Any extra arguments to append to the back
        extra: # optional
    - name: Install Qt and compile
      run: |
        pwd 
        ls -lrt
        ls -lrt ..
        ls -lrt ../Qt
        ls -lrt ../Qt/Tools
        python3 -m aqt tool -O ../Qt mac tools_ifw 3.2.2 mac-x64
        ls -lrt ../Qt/Tools
        which qmake
        qmake -r sciteqt.pro
        ls -lrt
        make
        ls -lrt
        ls -lrt scite/qt

        #make -j 4
        ls -lrt
        ls -lrt scite
        ls -lrt scite/qt
        cd scite/qt
        which macdeployqt
        macdeployqt sciteqt.app -dmg -verbose=1
        ls -lrt
    #~ - name: Create Release
      #~ id: create_release
      #~ if: contains(github.ref, 'release')
      #~ uses: actions/create-release@v1
      #~ env:
        #~ GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #~ with:
        #~ tag_name: ${{ github.ref }}
        #~ release_name: Release ${{ github.ref }}
        #~ draft: false
        #~ prerelease: false
    #~ - name: Upload Release Asset
      #~ if: contains(github.ref, 'release')
      #~ id: upload-release-asset
      #~ uses: actions/upload-release-asset@v1
      #~ env:
        #~ GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #~ with:
        #~ upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        #~ asset_path: scite/qt/sciteqt.dmg
        #~ asset_name: sciteqt.dmg
        #~ asset_content_type: application/exe
        
